function Get-TwitterCollections_Entries {
<#
.SYNOPSIS
    Curate a collection of Tweets

.DESCRIPTION
    GET collections/entries
    
    Retrieve the identified Collection, presented as a list of the Tweets curated within.
    
    The response structure of this method differs significantly from timelines you may be used to working with elsewhere in the Twitter API.
    
    To navigate a Collection, use the position object of a response, which includes attributes for max_position, min_position, and was_truncated. was_truncated indicates whether additional Tweets exist in the collection outside of the range of the current request. To retrieve Tweets further back in time, use the value of min_position found in the current response as the max_position parameter in the next call to this endpoint.

.PARAMETER id
    The identifier of the Collection for which to return results.

.PARAMETER count
    Specifies the maximum number of results to include in the response. Specify a count between 1 and 200. A next_cursor value will be provided in the response if additional results are available.

.PARAMETER max_position
    Returns results with a position value less than or equal to the specified position.

.PARAMETER min_position
    Returns results with a position greater than the specified position.

.NOTES
    This helper function was generated by the information provided here:
    https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-entries

#>
    [CmdletBinding()]
    Param(
        [string]$id,
        [string]$count,
        [string]$max_position,
        [string]$min_position
    )
    Begin {

        [hashtable]$Parameters = $PSBoundParameters
                   $CmdletBindingParameters | ForEach-Object { $Parameters.Remove($_) }

        [string]$Method      = 'GET'
        [string]$Resource    = '/collections/entries'
        [string]$ResourceUrl = 'https://api.twitter.com/1.1/collections/entries.json'

    }
    Process {

        # Find & Replace any ResourceUrl parameters.
        $UrlParameters = [regex]::Matches($ResourceUrl, '(?<!\w):\w+')
        ForEach ($UrlParameter in $UrlParameters) {
            $UrlParameterValue = $Parameters["$($UrlParameter.Value.TrimStart(":"))"]
            $ResourceUrl = $ResourceUrl -Replace $UrlParameter.Value, $UrlParameterValue
        }

        If (-Not $OAuthSettings) { $OAuthSettings = Get-TwitterOAuthSettings -Resource $Resource }
        Invoke-TwitterAPI -Method $Method -ResourceUrl $ResourceUrl -Parameters $Parameters -OAuthSettings $OAuthSettings

    }
    End {

    }
}
