name: $(Build.DefinitionName)_$(Build.SourceBranchName)_$(Date:yyyyMMdd))

variables:
- group: pipeline-variables

trigger:
- dev
- master

pr:
- none  

jobs:
- job: Windows
  pool:
    vmImage: 'windows-latest'

  steps:
    - task: PowerShell@2
      displayName: 'Check for pre-requisite modules'
      inputs:
        targetType: 'filePath' # 'filePath' or 'inline'; defaults to filePath
        filePath: '$(Build.SourcesDirectory)\build.ps1' # required when targetType == FilePath
        #arguments: '-apikey $(PSGallery-APIKey) -path $(Build.SourcesDirectory)\NSTrainTime'
        #script: # required when targetType == Inline; actual contents of the script
        #errorActionPreference: # options: stop, continue, silentlyContinue; defaults to 'stop'
        #failOnStderr: # optional, defaults to false
        #ignoreLASTEXITCODE: # optional, defaults to false
        #pwsh: false # optional, always use PowerShell Core (even on Windows); defaults to false
        workingDirectory: '$(Build.SourcesDirectory)' # optional, initial working directory
      #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: RunPsScriptAnalyzer@1
      displayName: 'PsScriptAnalyzer Task'
      inputs:
        PsFolder: '$(Build.SourcesDirectory)\NSTrainTime'
      enabled: false

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: 'Test-Pester.XML'
        searchFolder: '$(Build.SourcesDirectory)'
        mergeTestResults: true
      enabled: false

    - task: CopyFiles@2
      displayName: 'Stage files for artifact NSTrainTime (master only)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\NSTrainTime'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\NSTrainTime'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  
    
    - task: CopyFiles@2
      displayName: 'Stage files for artifact PSTwitterAPI (+ AZDO fix) (master only)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\PSTwitterAPI'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\PSTwitterAPI'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact to AZDO pipleines (master only)'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))